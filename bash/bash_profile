#!/usr/bin/env bash
# ------------------------------------------------------------------------------
# Description
#   "Modular" bash_profile.
#     - First executes every script in header/active to output a custom terminal
#       header or welcome screen.
#     - Then sources the configs in configs/
#       * configs/active/: sources every file found recursively.
#       * configs/prompt/: prompts the user to source every file
#         found recursively.
#
# Usage
#   The directory structure must be as follows:
#       ├─ header
#       │  ├─ active
#       │  └─ inactive
#       ├─ configs
#       │  ├─ active
#       │  ├─ inactive
#       │  └─ prompt
#       └─ bash_profile
#
#   Then make sure bash_profile is sourced at bash startup, for example by
#   setting a symbolic link this way:
#       ln -s /path/to/this/file $HOME/.bash_profile
#
# Dependencies
#   * Commands: awk, tput, read, source, test, readlink.
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Constants
# ------------------------------------------------------------------------------

# Formatting constants
export BOLD=`tput bold`
export UNDERLINE_ON=`tput smul`
export UNDERLINE_OFF=`tput rmul`
export TEXT_BLACK=`tput setaf 0`
export TEXT_RED=`tput setaf 1`
export TEXT_GREEN=`tput setaf 2`
export TEXT_YELLOW=`tput setaf 3`
export TEXT_BLUE=`tput setaf 4`
export TEXT_MAGENTA=`tput setaf 5`
export TEXT_CYAN=`tput setaf 6`
export TEXT_WHITE=`tput setaf 7`
export BACKGROUND_BLACK=`tput setab 0`
export BACKGROUND_RED=`tput setab 1`
export BACKGROUND_GREEN=`tput setab 2`
export BACKGROUND_YELLOW=`tput setab 3`
export BACKGROUND_BLUE=`tput setab 4`
export BACKGROUND_MAGENTA=`tput setab 5`
export BACKGROUND_CYAN=`tput setab 6`
export BACKGROUND_WHITE=`tput setab 7`
export RESET_FORMATTING=`tput sgr0`


# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------


# Ask the user a "yes/no" question. Defaults to "no".
#
# Arguments
#     1 (optional) the question to ask.
bash-profile_ask ()
{
  read -s -n1 -p "$@ [y/N] " ans
  case "$ans" in
    y*|Y*)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}


# Get the current cursor column.
bash-profile_get-cursor-column ()
{
  exec < /dev/tty
  oldstty=$(stty -g)
  stty raw -echo min 0
  tput u7 > /dev/tty
  IFS=';' read -r -d R -a pos
  stty $oldstty
  echo $((${pos[1]} - 1))
}


# Print a line.
#
# Arguments
#     1 (required) the first character.
#     2 (required) the character repeated to draw the line.
#     1 (required) the last character.
bash-profile_print-line ()
{
  local _WINDOW_Y=$(( $(tput cols) - $(bash-profile_get-cursor-column) ))
  echo -ne "$1"
  echo -ne `echo ""|awk '
  {
    _SPACES = '${_WINDOW_Y}'
    while (_SPACES-- > 2) printf ("'$2'")
  }'`
  echo -e "$3"
}


# Execute the header scripts.
bash-profile_exec-headers ()
{
  local file	

  # Loop through files in the header folder
  for file in $BASH_PROFILE_LOCATION/header/active/*; do
    
    # If this is a file, execute it
    if [ -f "$file" ]; then
      eval "$file"
    fi
  done
}


# Source the given file.
#
# Arguments
#     1 (required) the file to source.
#
# Options
#     --ask Prompt the user before.
#           To be put before first argument.
bash-profile_load-config ()
{
  # Handle the --ask option
  local ask=false
  if [ $1 = "--ask" ]; then
    shift
    ask=true
  fi

  # Extract a readable name from the file name
  # Example: "/home/user/folder/010_Aliases and functions.sh" => "Aliases and functions"
  local config_name=$(expr match "`echo $@`" '.*[/_]\([^\.]*\)')
  
  # Determine wether we're going to laod this config
  local load=true
  if $ask; then
    if ! bash-profile_ask "Load $config_name ?"; then
      load=false
    fi
  fi

  # Let's go
  if $load; then

    # Source the file
    source "`echo $@`" &> /tmp/bash_profile_config_out.log

    # Append the output to the report if needed
    if [ -s /tmp/bash_profile_config_out.log ]; then
      echo "${TEXT_BLUE}${BOLD}$config_name${RESET_FORMATTING} > " >> /tmp/bash_profile_configs_out
      (cat /tmp/bash_profile_config_out.log | sed -e "s/\(.*\)/\ \ \1/g"; echo) >> /tmp/bash_profile_configs_out
    fi

    # Update the configurations line
    if [ -z "${BASH_PROFILE_CONFIGS_LINE}" ]; then
      export BASH_PROFILE_CONFIGS_LINE="${TEXT_BLUE}${BOLD}Configs▸${RESET_FORMATTING} $config_name"
    else
      export BASH_PROFILE_CONFIGS_LINE=${BASH_PROFILE_CONFIGS_LINE}" ${TEXT_BLUE}▪${RESET_FORMATTING} $config_name"
    fi
  fi
  
  # If we have asked, redraw now
  if $ask; then
    tput rc; tput ed
    echo -e "$BASH_PROFILE_CONFIGS_LINE"
  fi
}


# Source the files recursively in the given folder.
#
# Arguments
#     1 (required) the folder to process.
#
# Options
#     --ask Prompt the user before loading each script.
#           To be put before first argument.
bash-profile_load-folder-configs ()
{
  local file
  local load_opts=""
	
  # Handle the --ask option
  if [ $1 = "--ask" ]; then
    shift
    load_opts="--ask"
  fi
  
  # Declare a boolean to determine the success of the operation
  local success=true
  
  # Escape spaces in the folder name
  local folder=`echo $1 | sed -e "s/ /\\ /g"`
  
  # Check that a valid folder was given
  if [ -d "$folder" ]; then
    
    # Check the folder is not empty
    if [ `ls "$folder" | wc -l` -ne 0 ]; then
    
      # Loop through files in the folder
      # (Trick: replace spaces in filenames with '&' to enter the for loop)
      for file in `find $folder/* -xtype f | sort | sed -e "s/ /\\&/g"`
      do
      
        # Restore spaces
        file=`echo $file | sed -e "s/\\&/ /g"`

        # Try loading the config
        bash-profile_load-config $load_opts $file
        
      done
      
    fi

  # If this is not a valid folder
  else
    echo -e "${TEXT_RED}${BOLD}'$1' not found or invalid.${RESET_FORMATTING}"
    success=false
  fi

  # If something went wrong, exit
  if ! $success; then
    `exit 1`
  fi
}


# Load the configurations
bash-profile_load-configs ()
{
  # Save the current cursor position
  tput sc

  # Source scripts in active/
  bash-profile_load-folder-configs "$BASH_PROFILE_LOCATION/configs/active"
  [[ -n $BASH_PROFILE_CONFIGS_LINE ]] && echo -e "$BASH_PROFILE_CONFIGS_LINE"

  # Source scripts in prompt/ (ask first)
  bash-profile_load-folder-configs --ask "$BASH_PROFILE_LOCATION/configs/prompt"
}


# Print the configurations output report.
bash-profile_print-configs-output ()
{
  if [ -s /tmp/bash_profile_configs_out ]; then
    bash-profile_print-line "${TEXT_RED}─" "─" "─${RESET_FORMATTING}"
    cat /tmp/bash_profile_configs_out | head --lines=-1
    bash-profile_print-line "${TEXT_RED}─" "─" "─${RESET_FORMATTING}"
  fi
}


# ------------------------------------------------------------------------------
# Main
# ------------------------------------------------------------------------------

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Resolve the real location of this file
export BASH_PROFILE_LOCATION="$(dirname "$(test -L "$BASH_SOURCE" && readlink "$BASH_SOURCE" || echo "$BASH_SOURCE")")"

# Local variables declarations
BASH_PROFILE_CONFIGS_LINE=""

# Clear the terminal
clear

# Clean traces from a previous execution
rm -f /tmp/bash_profile_configs_out

# Blank line
echo

# Print the top line
echo -ne "──❮ ${TEXT_YELLOW}$USER@$HOSTNAME${RESET_FORMATTING} ❯"
bash-profile_print-line "─" "─" "─"

# Execute the header scripts
bash-profile_exec-headers

# Load the configurations
bash-profile_load-configs

# Print the footer line
bash-profile_print-line "─" "─" "─"

# Print the configurations output
bash-profile_print-configs-output

# Blank line
echo

# Unset all variables and functions to ensure their visibility stay local
unset BASH_PROFILE_CONFIGS_LINE
unset -f bash-profile_ask
unset -f bash-profile_get-cursor-column
unset -f bash-profile_print-line
unset -f bash-profile_exec-headers
unset -f bash-profile_load-config
unset -f bash-profile_load-folder-configs
unset -f bash-profile_load-configs
unset -f bash-profile_print-configs-output
