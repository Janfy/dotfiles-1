# ------------------------------------------------------------------------------
# Description
#   Configuration file for Git.
# ------------------------------------------------------------------------------

[user]
  name = Julien Nicoulaud
  email = julien.nicoulaud@gmail.com

[core]
  editor = vim
  pager = less -FRSX
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol

[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = auto
  pager = true

[merge]
  tool = meld

[push]
  default = matching

[diff]
  rename = copy
  color = auto

[apply]
  whitespace = fix

[pager]
  color = true

[status]
  color = auto

[github]
  user = nicoulaj
  token = d229323408dff5f3a6ad44c37648fe88

[alias]

  # SVN style shortcuts
  co = "checkout"
  ci = "commit"
  cia = "commit -a -v"
  w = "whatchanged"
  st = "status"

  # List all branches, even remote ones
  lsbr = "branch -a"

  # Create a branch (usage: 'git mkbr branch_name')
  mkbr = "branch"

  # Remove a branch (usage: 'git rmbr branch_name')
  rmbr = "branch -d"

  # Rename a branch (usage: 'git mvbr branch_name new_branch_name')
  mvbr = "branch -m"

  # List all tags
  lstag = "tag -l"

  # Create a new tag based on specified commit
  mktag = "tag -a"

  # Remove existing tag by name
  rmtag = "tag -d"

  # Rename tag from one name to another
  mvtag = "tag -m"

  # Create new remote repository for project
  mkrem = "remote add"

  # List remote repositories
  lsrem = "remote"

  # Fetch and rebase from SVN repository
  spull = !git svn fetch && git svn rebase

  # Push keeping each local commit as atomic.
  spush = !git svn dcommit

  # Initialize all submodules
  modinit = "submodule init"

  # Update all submodules
  modup = "submodule update"

  # Show status of all submodules
  modst = "submodule status"

  # Add a new submodule (usage: 'git modadd module-name url')
  modadd = "submodule add"

  # Show last 15 log entries
  recentlog = "log -n 15"

  # Push local committed changes to origin (usually GitHub)
  opush = !git push origin master

  # Pull changes from origin (usually GitHub)
  opull = !git pull origin master

  # Sync (pull then push) from origin (usually GitHub)
  osync = !git opull && git opush
