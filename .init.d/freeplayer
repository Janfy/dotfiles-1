#!/bin/sh
# --------------------------------------------------------------------------------------------------
# Description
#   Daemon script to start/stop the FreePlayer.
#
# Usage
#   First create a user that will run the daemon:
#     $ useradd -G users -s /bin/false -d /path/to/documents/root freeplayer
#
#   Drop this script in /etc/init.d/freeplayer, and make it executable:
#     $ sudo chmod +x /etc/init.d/freeplayer
#
#   To auto-start/stop the daemon with the system:
#     $ sudo update-rc.d freeplayer defaults 99
# --------------------------------------------------------------------------------------------------

### BEGIN INIT INFO
# Provides:          freeplayer
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Daemon script to start/stop the FreePlayer.
# Description:       Daemon script to start/stop the FreePlayer.
### END INIT INFO


# --------------------------------------------------------------------------------------------------
# Constants definitions
# --------------------------------------------------------------------------------------------------

PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="freeplayer"
DAEMONNAME=vlc
DAEMON=/usr/bin/vlc
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
USER=freeplayer:users


# --------------------------------------------------------------------------------------------------
# Initialization & imports
# --------------------------------------------------------------------------------------------------

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$DAEMONNAME ] && . /etc/default/$DAEMONNAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions


# --------------------------------------------------------------------------------------------------
# Functions
# --------------------------------------------------------------------------------------------------

# Start the daemon.
#
# Return
#   0 if daemon has been started.
#   1 if daemon was already running.
#   2 if daemon could not be started.
do_start()
{
  # Test if the daemon is already running.
  do_status
  [ "$?" = 0 ] && return 1

  # Start the daemon.
  start-stop-daemon --start \
                    --background \
                    --pidfile $PIDFILE \
                    --make-pidfile \
                    --exec $DAEMON \
                    --chuid $USER \
                    -- -I "dummy" \
                       --extraintf=http \
                       --http-host=:8080 \
                       --sout="#std" \
                       --sout-standard-access=udp \
                       --sout-standard-mux=ts \
                       --sout-standard-dst=212.27.38.253:1234 \
                       --sout-ts-pid-video=68 \
                       --sout-ts-pid-audio=69 \
                       --sout-ts-pid-spu=70 \
                       --sout-ts-pcr=80 \
                       --sout-ts-dts-delay=400 \
                       --no-playlist-autostart \
                       --subsdec-encoding=ISO-8859-1 \
                       --sout-transcode-maxwidth=720 \
                       --sout-transcode-maxheight=576 \
                       --play-and-stop \
                       --http-src="/usr/share/freeplayer/http-fbx/" \
   || return 2
}

# Stop the daemon.
#
# Return
#   0 if daemon has been stopped.
#   1 if daemon was already stopped.
#   2 if daemon could not be stopped.
#   other if a failure occurred.
do_stop()
{
  # Stop the daemon.
  start-stop-daemon --stop \
                    --quiet \
                    --retry=TERM/30/KILL/5 \
                    --pidfile $PIDFILE \
                    --name $DAEMONNAME
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2

  # Delete the pidfile.
  rm -f $PIDFILE
    
  return "$RETVAL"
}

# Get the status of the daemon.
#
# Return
#   0 if daemon is running.
#   1 if daemon is not running.
#   2 if the pidfile exists but the daemon is not running.
do_status()
{
  # No pidfile, the daemon is not running.
  [ -f $PIDFILE ] || return 1
  
  # Get the daemon pid from the pidfile.
  DAEMON_PID=$( cat $PIDFILE )
  
  # Get the pids of the executable.
  DAEMONNAME_PIDS=$( pidof $DAEMONNAME )
  
  # Test if one matches the one of the pidfile.
  for i in $DAEMONNAME_PIDS; do
    if [ "$i" = "$DAEMON_PID" ]; then
      return 0
    fi
  done
  
  # No match was found, there is something wrong, delete the pidfile.
  rm -f $PIDFILE
  
  return 2
}

# --------------------------------------------------------------------------------------------------
# Main
# --------------------------------------------------------------------------------------------------

case "$1" in
  start)
    log_daemon_msg "Starting $NAME"
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1; log_warning_msg "$NAME is already running." ;;
      2) log_end_msg 1 ;;
    esac
    ;;
  stop)
    log_daemon_msg "Stopping $NAME"
    do_stop
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1; log_warning_msg "$NAME is not running." ;;
      2) log_end_msg 1 ;;
    esac
    ;;
  status)
    do_status
    case "$?" in
      0) log_success_msg "$NAME is running (pid $( cat $PIDFILE ))." ;;
      1) log_daemon_msg "$NAME is not running." ;;
      2) log_failure_msg "Something is wrong: there is a pidfile ($PIDFILE), but $NAME is not running. The pidfile has been deleted." ;;
    esac
    ;;
  restart)
    log_daemon_msg "Restarting $NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1; log_failure_msg "The old process is still running." ;;
          *) log_end_msg 1 ;;
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
    exit 3
    ;;
esac

:
