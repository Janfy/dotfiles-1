#!/usr/bin/env bash
# --------------------------------------------------------------------------------------------------
# Description
#   Script to clean XML files exported from eXo:
#     * portal.xml
#     * pages.xml
#     * navigation.xml
#     * portlet-preferences.xml
#
# Usage
#   $ ./clean-exported-xml FILE...
#   Several files can be passed as argument, wildcards (*) can be used too.
# --------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------
# Functions
# --------------------------------------------------------------------------------------------------


# Clean the beginning of the file.
#
# Arguments
#     1 (required) the path to the file to treat.
function clean-beginning()
{
  sed -i -e "s/.*<?xml version=\"1.0\"/<?xml version=\"1.0\"/g" $1
}

# Clean the end of the file.
#
# Arguments
#     1 (required) the path to the file to treat.
function clean-end()
{
  sed -i -e "s/<\/data>.*//g" $1
}

# Rebuild the HTML escaped characters.
#
# Arguments
#     1 (required) the path to the file to treat.
function clean-html-escapes()
{
  # '<' and '>' are HTML encoded
  sed -i -e "s/&lt;/</g" $1
  sed -i -e "s/&gt;/>/g" $1
}

# Clean portlet-preferences.xml.
#
# Arguments
#     1 (required) the path to the file to treat.
function clean-portlet-preferences()
{
  # Clean the stuff between the items
  sed -i -e "s/<\/portlet-preferences>.*/<\/portlet-preferences>/g" $1

  # Clean the beginning
  clean-beginning $1

  # Clean the end
  clean-end $1

  # Wrap the document in <portlet-preferences-set> tags
  sed -i '2i\
<portlet-preferences-set>
' $1
  echo '
</portlet-preferences-set>' >> $1

  # Rename the file
  mv $1 `dirname $1`/portlet-preferences.xml
}

# Clean pages.xml.
#
# Arguments
#     1 (required) the path to the file to treat.
function clean-pages()
{
  # Clean the stuff between the items
  sed -i -e "s/<\/page>.*/<\/page>/g" $1

  # Clean the beginning
  clean-beginning $1

  # Clean the end
  clean-end $1

  # Wrap the document in <portlet-preferences-set> tags
  sed -i '2i\
<page-set>
' $1
  echo '
</page-set>' >> $1

  # Rename the file
  mv $1 `dirname $1`/pages.xml
}

# Clean navigation.xml.
#
# Arguments
#     1 (required) the path to the file to treat.
function clean-navigation()
{
  # Clean the beginning
  clean-beginning $1

  # Clean the end
  clean-end $1

  # Rename the file
  mv $1 `dirname $1`/navigation.xml
}

# Clean portal.xml.
#
# Arguments
#     1 (required) the path to the file to treat.
function clean-portal()
{
  # Clean the beginning
  clean-beginning $1

  # Clean the end
  clean-end $1

  # Rename the file
  mv $1 `dirname $1`/portal.xml
}

# Clean the given XML file.
#
# Arguments
#     1 (required) the path to the file to treat.
function clean-exported-xml-file()
{
  # Log a message
  echo -ne "$1 > "

  # Clean HTML escaped characters
  clean-html-escapes $1

  # Test if this a navigation.xml
  cat $1 | grep '<node-navigation>' > /dev/null
  if test `echo $?` -eq 0 ; then
    echo -ne "navigation.xml"
    clean-navigation $1
    echo
    return
  fi

  # Test if this a pages.xml
  cat $1 | grep '<page>' > /dev/null
  if test `echo $?` -eq 0 ; then
    echo -ne "pages.xml"
    clean-pages $1
    echo
    return
  fi

  # Test if this a portal.xml
  cat $1 | grep '<portal-config>' > /dev/null
  if test `echo $?` -eq 0 ; then
    echo -ne "portal.xml"
    clean-portal $1
    echo
    return
  fi

  # Test if this a portlet-preferences.xml
  cat $1 | grep '<portlet-preferences>' > /dev/null
  if test `echo $?` -eq 0 ; then
    echo -ne "portlet-preferences.xml"
    clean-portlet-preferences $1
    echo
    return
  fi

  # If the file did not match any criteria
  echo -ne "ERROR: Unrecognized file"
}


# --------------------------------------------------------------------------------------------------
# Main
# --------------------------------------------------------------------------------------------------

# Handle each argument
while [ $# -gt 0 ];
do

  # Test if argument contains a wildcard
  echo $1 | grep '*' > /dev/null

  # If yes, loop on target files
  if test `echo $?` -eq 0 ; then
    for file in $1 ; do
      clean-exported-xml-file "$file"
    done

  # Else treat directly
  else
    clean-exported-xml-file "$1"
  fi

  # Go to next argument
  shift

done
