#!/usr/bin/env bash
# --------------------------------------------------------------------------------------------------
# Description
#   This script tries to setup a debug version of the Flash Player on Linux 64bits systems.
#   Should work on Debian and Ubuntu, at least for Firefox.
#   Use it at your own risk !
# --------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------
# Variables
# --------------------------------------------------------------------------------------------------

# Package manager to use
PACKAGE_MANAGER='apt-get'

# Packages to purge
PACKAGES_TO_PURGE='flashplugin-nonfree gnash gnash-common mozilla-plugin-gnash swfdec-mozilla libflashsupport nspluginwrapper flashplugin-installer'

# Packages to (re)install
PACKAGES_TO_INSTALL='nspluginwrapper ia32-libs'

# Flash Player debug for Linux download location
FLASH_PLAYER_DEBUG_DOWNLOAD_URL='http://download.macromedia.com/pub/flashplayer/updaters/10'
FLASH_PLAYER_DEBUG_DOWNLOAD_FILENAME='flash_player_10_linux_dev.tar.gz'

# Folder for temporary files
TMP_FOLDER='/tmp/flash-player-install'

# Folder to install binaries
INSTALL_FOLDER='/opt/flash'

# Flash player archive file names
ARCHIVE_FOLDER_NAME='flash_player_10_linux_dev'
PATH_TO_LIB_ARCHIVE='plugin/debugger'
PATH_TO_STANDALONE_ARCHIVE='standalone/debugger'
LIB_ARCHIVE_FILENAME='libflashplayer.so.tar.gz'
STANDALONE_ARCHIVE_FILENAME='flashplayer.tar.gz'

# Test application
TEST_SWF_URL='http://www.ju-n.net/flash-player-version.swf'

# Colors
NO_COLOR='\e[0m'
BLACK='\e[0;30m'
RED='\e[0;31m'
GREEN='\e[0;32m'
YELLOW='\e[0;33m'
BLUE='\e[0;34m'
MAGENTA='\e[0;35m'
CYAN='\e[0;36m'
WHITE='\e[0;37m'
EBLACK='\e[1;30m'
ERED='\e[1;31m'
EGREEN='\e[1;32m'
EYELLOW='\e[1;33m'
EBLUE='\e[1;34m'
EMAGENTA='\e[1;35m'
ECYAN='\e[1;36m'
EWHITE='\e[1;37m'
UBLACK='\e[4;30m'
URED='\e[4;31m'
UGREEN='\e[4;32m'
UYELLOW='\e[4;33m'
UBLUE='\e[4;34m'
UMAGENTA='\e[4;35m'
UCYAN='\e[4;36m'
UWHITE='\e[4;37m'
BBLACK='\e[40m'
BRED='\e[41m'
BGREEN='\e[42m'
BYELLOW='\e[43m'
BBLUE='\e[44m'
BMAGENTA='\e[45m'
BCYAN='\e[46m'
BWHITE='\e[47m'


# --------------------------------------------------------------------------------------------------
# Functions
# --------------------------------------------------------------------------------------------------

# Output an info message
function info() {
    echo -e $EBLUE$@$NO_COLOR
}

# Output an error message
function error() {
    echo -e $ERED$@$NO_COLOR
}

# Display a title
function title() {
    echo
    echo -e $BBLUE" $@ "$NO_COLOR
}

# Make sure we have root access
function is_root() {
    if [ ! `whoami` = "root" ]
    then
        return 1
    else
        return 0
    fi
}

# Make sure this is a 64 bits OS
function is_64bits() {
    if [ ! `uname -m` = "x86_64" ]
    then
        return 1
    else
        return 0
    fi
}

# Ask a Yes/No question
function ask() {
    echo -ne $EBLUE"$@" '[y/n] '$NO_COLOR ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

# Make sure Firefox is not running
function shutdown_firefox() {
    local pid pname
    for pid in $(ps -e | grep "firefox" | awk '{print $1;}') ; do
        if ask "Kill Firefox process (pid $pid) ?"
        then
            kill "-TERM" $pid
        else
            return 1
        fi
    done
    return 0
}

# Install getlibs
function install_getlibs() {
    if [[ ! `which getlibs` ]]
    then
        $PACKAGE_MANAGER install getlibs
    fi
    if [[ ! `which getlibs` ]]
    then
        wget frozenfox.freehostia.com/cappy/getlibs-all.deb
        dpkg -i getlibs-all.deb
        rm -vf getlibs-all.deb
    fi
    if [[ `which getlibs` ]]
    then
        return 0
    else
        return 1
    fi
}

# Clean temporary files
function clean_tmp () {
    cd -
    rm -rvf $TMP_FOLDER
}

# Exit if previous command has failed
function exit_if_failed() {
    if [[ ! $? = 0 ]]
    then
        error $@
        clean_tmp
        exit 1
    fi
}


# --------------------------------------------------------------------------------------------------
# Main
# --------------------------------------------------------------------------------------------------
    
# Make sure there are no temporary files from a previous execution
title "Clean previous temporary files"
rm -rvf $TMP_FOLDER
mkdir -pv $TMP_FOLDER
cd $TMP_FOLDER

# Check that we are on a 64 bits OS
title "Check architecture"
is_64bits
exit_if_failed "This script only applies to 64 bits architectures."

# Check that we are root
title "Check execution rights"
is_root
exit_if_failed "You must run this script as root."

# Make sure Firefox is not running
title "Make sure Firefox is not running"
shutdown_firefox
exit_if_failed "You must shutdown all instances of Firefox to run the script."

# Purge all Flash support shitty packages
title "Purge Flash player packages"
$PACKAGE_MANAGER remove -y --purge $PACKAGES_TO_PURGE
exit_if_failed "An error happened while removing packages."

# Clean all traces from Flash Player
title "Purge remaining Flash Player traces"
rm -vf /usr/lib/mozilla/plugins/*flash*
rm -vf /usr/lib/firefox/plugins/*flash*
rm -vf ~/.mozilla/plugins/*flash*
rm -rvfd /usr/lib/nspluginwrapper
rm -rfv $INSTALL_FOLDER

# Install packages
title "(Re)install needed packages"
$PACKAGE_MANAGER install $PACKAGES_TO_INSTALL
exit_if_failed "An error happened while installing packages."

# Download our Flash player
title "Download Flash Player debug version"
wget $FLASH_PLAYER_DEBUG_DOWNLOAD_URL/$FLASH_PLAYER_DEBUG_DOWNLOAD_FILENAME
exit_if_failed "An error happened while downloading the Flash Player."

# Extract the downloaded archive
title "Extract the archive"
tar -xvzf $FLASH_PLAYER_DEBUG_DOWNLOAD_FILENAME
exit_if_failed "An error happened while extracting the archive."
tar -xvzf $ARCHIVE_FOLDER_NAME/$PATH_TO_LIB_ARCHIVE/$LIB_ARCHIVE_FILENAME
exit_if_failed "An error happened while extracting the Flash Player library."
tar -xvzf $ARCHIVE_FOLDER_NAME/$PATH_TO_STANDALONE_ARCHIVE/$STANDALONE_ARCHIVE_FILENAME
exit_if_failed "An error happened while extracting the stadnalone Flash Player."

# Look for the lib and replace it everywhere
# (just to be sure and eventually make it work for other browsers / unexpected systems)
title "Replace the library everywhere we find it"
find / -name libflashplayer.so -print -exec cp -iv libflashplayer.so {} \;

# Copy it to Firefox's plugins folder
title "Copy the library to Firefox's plugins folder"
cp -v libflashplayer.so /usr/lib/mozilla/plugins

# Install getlibs if needed
title "Install getlibs"
install_getlibs
exit_if_failed "An error happened while installing getlibs."

# Get the needed 32 bits libs
title "Install some 32 bits libraries"
echo Y | getlibs -p libcurl3
echo Y | getlibs -p libnss3-1d
echo Y | getlibs -p libnspr4-0d

# Setup the 32 -> 64 bits plugin wrapper
title "Setup the 32 -> 64 bits plugin wrapper"
nspluginwrapper -v -i /usr/lib/mozilla/plugins/libflashplayer.so
exit_if_failed "An error happened while setting up nspluginwrapper."
ln -svf /usr/lib/nspluginwrapper/plugins/npwrapper.libflashplayer.so /usr/lib/mozilla/plugins/
ln -svf /usr/lib/nspluginwrapper/plugins/npwrapper.libflashplayer.so /usr/lib/firefox-addons/plugins/
ln -svf /usr/lib/nspluginwrapper/plugins/npwrapper.libflashplayer.so /usr/lib/xulrunner-addons/plugins/

# Install the standalone Flash Player
title "Setup the standalone Flash Player"
mkdir -v $INSTALL_FOLDER
cp -vf flashplayer $INSTALL_FOLDER/flashplayer
ln -svf $INSTALL_FOLDER/flashplayer /usr/bin/flashplayer

# Setup Flash Player debug logfile
title "Setup Flash log file"
message "Setting up the Flash Player debug configuration file at $HOME/mm.cfg. Enables output of the Flash Player log in a file."
rm -fv $HOME/mm.cfg
echo 'ErrorReportingEnable 1                                   ' >> $HOME/mm.cfg
echo 'MaxWarnings 0                                            ' >> $HOME/mm.cfg
echo 'TraceOutputFileEnable 1                                  ' >> $HOME/mm.cfg
chmod -v 775 $HOME/mm.cfg

# Setup a command to trace the log
title "Setup a command to trace the Flash Player log"
echo '#!/usr/bin/env bash                                      ' >> $INSTALL_FOLDER/flashlog.sh
echo 'tail -f $HOME/.macromedia/Flash_Player/Logs/flashlog.txt ' >> $INSTALL_FOLDER/flashlog.sh
chmod -v +x $INSTALL_FOLDER/flashlog.sh
ln -svf $INSTALL_FOLDER/flashlog.sh /usr/bin/flashlog

# Clean our mess
title "Clean temporary files"
clean_tmp

# Output info
title "Finished"
info "Two new commands have been added to your path:"
info " 'flashplayer' runs the standalone Flash Player."
info " 'flashlog' outputs the FlashPlayer log to the console. See $INSTALL_FOLDER/flashlog.sh for more information."

# Make the user test
title "Tests"
if ask "Do you want to test the installation on Firefox ?"
then
    firefox $TEST_SWF_URL &> /dev/null &

fi
if ask "Do you want to test the installation of the standalone Flash Player ?"
then
    flashplayer $TEST_SWF_URL &> /dev/null &
fi

# Exit
exit 0

