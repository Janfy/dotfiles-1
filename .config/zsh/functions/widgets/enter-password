#!/usr/bin/env zsh
# ------------------------------------------------------------------------------------------
# Description
#   enter-password reads a line from the terminal, displaying an asterisk for each character
#   typed.  It stores the line in the global variable HIDDEN_PASSWORD, and when finished reading,
#   inserts the string ${HIDDEN_PASSWORD} into the original command buffer.
#   If one argument is given, it is the prompt.  The default is "Password: ".
#   If two or three arguments are given, they form the prefix and suffix of the inserted
#   HIDDEN_PASSWORD.  Defaults are '${' and '}' but these can be replaced, for example with '"${'
#   and '}"' to enclose the whole word in double quotes, or '${(z)' and '}' to split the
#   value of $HIDDEN_PASSWORD like the shell parser.
#
#   From http://www.zsh.org/mla/users/2011/msg00082.html
#
# Usage
#   Bind it to <CTRL><X><X> for example:
#     autoload enter-password
#     zle -N enter-password
#     bindkey '^Xx' enter-password
# ------------------------------------------------------------------------------------------

emulate -L zsh
# Shamelessly cribbed from read-from-minibuffer.

# Hide the value of HIDDEN_PASSWORD in any output of set and typeset
typeset -g -H HIDDEN_PASSWORD=

local pretext="$PREDISPLAY$LBUFFER$RBUFFER$POSTDISPLAY"$'\n'

# Can't directly make these locals because enter-password is
# called as a widget, so these special variables are already
# local at the current level and wouldn't get restored
local save_lbuffer=$LBUFFER
local save_rbuffer=$RBUFFER
local save_predisplay=$PREDISPLAY
local save_postdisplay=$POSTDISPLAY
local -a save_region_highlight
save_region_highlight=("${region_highlight[@]}")

{
  local lb rb opn=${2:-'${'} cls=${3:-'}'}
  LBUFFER=
  RBUFFER=
  PREDISPLAY="$pretext${1:-Password: }"
  POSTDISPLAY=
  region_highlight=("P${(m)#pretext} ${(m)#PREDISPLAY} bold")

  while zle -R && zle .read-command
  do
    # There are probably more commands that should go into
    # the first clause here to harmlessly beep, because ...
    case $REPLY in
    (enter-password|run-help|undefined-key|where-is|which-command)
      zle .beep;;
    (push-*|send-break) HIDDEN_PASSWORD=;&
    (accept-*) break;;
    (*)
      LBUFFER=$lb
      RBUFFER=$rb
      zle $REPLY      # ... this could expose something
      lb=$LBUFFER
      rb=$RBUFFER
      HIDDEN_PASSWORD=$BUFFER
      LBUFFER=${(l:$#LBUFFER::*:):-}
      RBUFFER=${(l:$#RBUFFER::*:):-}
      ;;
    esac
  done
} always {
  LBUFFER=$save_lbuffer
  RBUFFER=$save_rbuffer
  PREDISPLAY=$save_predisplay
  POSTDISPLAY=$save_postdisplay
  region_highlight=("${save_region_highlight[@]}")
  zle -R

  # Now that the highlight has been restored with all the old
  # text and cursor positioning, insert the new text.
  LBUFFER+=${HIDDEN_PASSWORD:+${opn}HIDDEN_PASSWORD${cls}}
}

# Make sure the variable is unset.
unset_invisible () {unset HIDDEN_PASSWORD}
add-zsh-hook precmd unset_invisible
